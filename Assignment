Backend Implementation
Step 1: Setting Up the Project
Initialize a new Node.js project.
Install necessary packages:
npm init -y
npm install express mongoose axios body-parser
Step 2: Setting Up the Server
Create a file server.js:
const express = require('express');
const mongoose = require('mongoose');
const axios = require('axios');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 5000;
const DB_URI = 'mongodb://localhost:27017/mern_stack_challenge';

app.use(bodyParser.json());

mongoose.connect(DB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.log(err));

const transactionSchema = new mongoose.Schema({
    title: String,
    description: String,
    price: Number,
    dateOfSale: Date,
    category: String,
    sold: Boolean,
});

const Transaction = mongoose.model('Transaction', transactionSchema);

// API to initialize the database
app.get('/api/init', async (req, res) => {
    try {
        const { data } = await axios.get('https://s3.amazonaws.com/roxiler.com/product_transaction.json');
        await Transaction.deleteMany({});
        await Transaction.insertMany(data);
        res.send('Database initialized');
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// API to list all transactions with search and pagination
app.get('/api/transactions', async (req, res) => {
    const { month, search = '', page = 1, perPage = 10 } = req.query;
    const monthIndex = new Date(`${month} 1, 2020`).getMonth();
    const regex = new RegExp(search, 'i');
    const filter = {
        dateOfSale: { $gte: new Date(2020, monthIndex, 1), $lt: new Date(2020, monthIndex + 1, 1) },
        $or: [{ title: regex }, { description: regex }, { price: regex }]
    };
    
    try {
        const transactions = await Transaction.find(filter)
            .skip((page - 1) * perPage)
            .limit(parseInt(perPage));
        res.json(transactions);
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// API for statistics
app.get('/api/statistics', async (req, res) => {
    const { month } = req.query;
    const monthIndex = new Date(`${month} 1, 2020`).getMonth();
    const filter = {
        dateOfSale: { $gte: new Date(2020, monthIndex, 1), $lt: new Date(2020, monthIndex + 1, 1) }
    };

    try {
        const totalSales = await Transaction.aggregate([
            { $match: filter },
            { $group: { _id: null, total: { $sum: '$price' }, soldCount: { $sum: 1 }, notSoldCount: { $sum: { $cond: ['$sold', 0, 1] } } } }
        ]);
        res.json(totalSales[0]);
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// API for bar chart data
app.get('/api/bar-chart', async (req, res) => {
    const { month } = req.query;
    const monthIndex = new Date(`${month} 1, 2020`).getMonth();
    const filter = {
        dateOfSale: { $gte: new Date(2020, monthIndex, 1), $lt: new Date(2020, monthIndex + 1, 1) }
    };

    try {
        const priceRanges = [
            { range: '0-100', min: 0, max: 100 },
            { range: '101-200', min: 101, max: 200 },
            { range: '201-300', min: 201, max: 300 },
            { range: '301-400', min: 301, max: 400 },
            { range: '401-500', min: 401, max: 500 },
            { range: '501-600', min: 501, max: 600 },
            { range: '601-700', min: 601, max: 700 },
            { range: '701-800', min: 701, max: 800 },
            { range: '801-900', min: 801, max: 900 },
            { range: '901-above', min: 901, max: Infinity }
        ];

        const barChartData = await Promise.all(priceRanges.map(async range => {
            const count = await Transaction.countDocuments({
                ...filter,
                price: { $gte: range.min, $lte: range.max === Infinity ? Number.MAX_SAFE_INTEGER : range.max }
            });
            return { range: range.range, count };
        }));

        res.json(barChartData);
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// API for pie chart data
app.get('/api/pie-chart', async (req, res) => {
    const { month } = req.query;
    const monthIndex = new Date(`${month} 1, 2020`).getMonth();
    const filter = {
        dateOfSale: { $gte: new Date(2020, monthIndex, 1), $lt: new Date(2020, monthIndex + 1, 1) }
    };

    try {
        const pieChartData = await Transaction.aggregate([
            { $match: filter },
            { $group: { _id: '$category', count: { $sum: 1 } } }
        ]);

        res.json(pieChartData);
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// API to fetch data from all the above APIs and combine the response
app.get('/api/combined', async (req, res) => {
    const { month } = req.query;

    try {
        const transactions = await axios.get(`http://localhost:${PORT}/api/transactions`, { params: { month } });
        const statistics = await axios.get(`http://localhost:${PORT}/api/statistics`, { params: { month } });
        const barChart = await axios.get(`http://localhost:${PORT}/api/bar-chart`, { params: { month } });
        const pieChart = await axios.get(`http://localhost:${PORT}/api/pie-chart`, { params: { month } });

        res.json({
            transactions: transactions.data,
            statistics: statistics.data,
            barChart: barChart.data,
            pieChart: pieChart.data
        });
    } catch (error) {
        res.status(500).send(error.message);
    }
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});


Frontend Implementation
Step 1: Setting Up the React Project
Create a new React app:

npx create-react-app mern-stack-challenge
cd mern-stack-challenge
npm install axios chart.js react-chartjs-2

Step 2: Creating Components
Create a folder src/components and inside it, create the following components:

1. TransactionsTable.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const TransactionsTable = ({ month }) => {
    const [transactions, setTransactions] = useState([]);
    const [search, setSearch] = useState('');
    const [page, setPage] = useState(1);

    useEffect(() => {
        const fetchTransactions = async () => {
            const { data } = await axios.get('/api/transactions', {
                params: { month, search, page }
            });
            setTransactions(data);
        };

        fetchTransactions();
    }, [month, search, page]);

    return (
        <div>
            <input
                type="text"
                placeholder="Search transactions"
                value={search}
                onChange={e => setSearch(e.target.value)}
            />
            <table>
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Date of Sale</th>
                        <th>Category</th>
                        <th>Sold</th>
                    </tr>
                </thead>
                <tbody>
                    {transactions.map(tx => (
                        <tr key={tx._id}>
                            <td>{tx.title}</td>
                            <td>{tx.description}</td>
                            <td>{tx.price}</td>
                            <td>{new Date(tx.dateOfSale).toLocaleDateString()}</td>
                            <td>{tx.category}</td>
                            <td>{tx.sold ? 'Yes' : 'No'}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
            <button onClick={() => setPage(page => Math.max(page - 1, 1))}>Previous</button>
            <button onClick={() => setPage(page => page + 1)}>Next</button>
        </div>
    );
};

export default TransactionsTable;

2. Statistics.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Statistics = ({ month }) => {
    const [stats, setStats] = useState({});

    useEffect(() => {
        const fetchStatistics = async () => {
            const { data } = await axios.get('/api/statistics', {
                params: { month }
            });
            setStats(data);
        };

        fetchStatistics();
    }, [month]);

    return (
        <div>
            <h2>Statistics</h2>
            <p>Total Sale Amount: {stats.total}</p>
            <p>Total Sold Items: {stats.soldCount}</p>
            <p>Total Not Sold Items: {stats.notSoldCount}</p>
        </div>
    );
};

export default Statistics;
3. BarChart.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Bar } from 'react-chartjs-2';

const BarChart = ({ month }) => {
    const [data, setData] = useState([]);

    useEffect(() => {
        const fetchBarChartData = async () => {
            const { data } = await axios.get('/api/bar-chart', {
                params: { month }
            });
            setData(data);
        };

        fetchBarChartData();
    }, [month]);

    const chartData = {
        labels: data.map(item => item.range),
        datasets: [{
            label: 'Number of Items',
            data: data.map(item => item.count),
            backgroundColor: 'rgba(75, 192, 192, 0.6)',
        }]
    };

    return <Bar data={chartData} />;
};

export default BarChart;
4. PieChart.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Pie } from 'react-chartjs-2';

const PieChart = ({ month }) => {
    const [data, setData] = useState([]);

    useEffect(() => {
        const fetchPieChartData = async () => {
            const { data } = await axios.get('/api/pie-chart', {
                params: { month }
            });
            setData(data);
        };

        fetchPieChartData();
    }, [month]);

    const chartData = {
        labels: data.map(item => item._id),
        datasets: [{
            label: 'Number of Items',
            data: data.map(item => item.count),
            backgroundColor: [
                '#FF6384',
                '#36A2EB',
                '#FFCE56',
                '#4BC0C0',
                '#9966FF',
                '#FF9F40',
            ]
        }]
    };

    return <Pie data={chartData} />;
};

export default PieChart;
5. App.js
import React, { useState } from 'react';
import TransactionsTable from './components/TransactionsTable';
import Statistics from './components/Statistics';
import BarChart from './components/BarChart';
import PieChart from './components/PieChart';

const App = () => {
    const [month, setMonth] = useState('March');

    return (
        <div>
            <h1>Transaction Dashboard</h1>
            <label>
                Select Month:
                <select value={month} onChange={e => setMonth(e.target.value)}>
                    {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(m => (
                        <option key={m} value={m}>{m}</option>
                    ))}
                </select>
            </label>
            <TransactionsTable month={month} />
            <Statistics month={month} />
            <BarChart month={month} />
            <PieChart month={month} />
        </div>
    );
};

export default App;
Step 3: Running the Project
Run the backend server:
node server.js
Run the frontend development server:
npm start
